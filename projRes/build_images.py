#!/usr/bin/python
#encoding:utf-8
#Filename: build_images.py

import os
import sys
import re
import time
from hashlib import md5

from xc_helper_base import XCProject
from xc_helper_base import StringResource
from xc_helper_base import StringObject
from xc_helper_base import message
from xc_helper_base import ImagesResource

class ImagesBuilder(object):
	""" Build macros for image resources """
	def __init__(self, xcodeproj):
		super(ImagesBuilder, self).__init__()
		self.xcodeproj = xcodeproj

	def buildImagesMacros(self):
		imgResMgr = ImagesResource(self.xcodeproj)
		images = imgResMgr.loadImagesResource()
		images = dict((k, imgResMgr.imageNameFromPath(v[0]['path'])) for k, v in images.items())

		if len(images) == 0:
			message().warning('No image resources found, Finished!')
			return

		autoGenDir = os.path.join(self.xcodeproj.projectHome, 'autoGen')
		if not os.path.isdir(autoGenDir):
			os.makedirs(autoGenDir)

		if not os.path.isdir(autoGenDir):
			message().error('Failed to create directory: "%s"' % autoGenDir)
			sys.exit(1)

		macroFile = self.xcodeproj.projectClassPrefix() + 'ImageResources.h'
		macroFile = os.path.join(autoGenDir, macroFile)
		
		currentVersion = self.currentImageResourceHash(images.keys())
		fileVersion = self.macrosFileVersion(macroFile)
		if fileVersion and currentVersion and currentVersion.lower() == fileVersion.lower():
			message().info('Resources has no changes, Done!')
			return

		fp = open(macroFile, 'wb')
		if not fp:
			message().error('Failed to open file: %s' % macroFile)
			sys.exit(1)

		try:
			# output file header
			fp.write('///\n/// %s\n' % os.path.basename(macroFile))
			fp.write('/// %s\n///\n' % self.xcodeproj.productName())
			fp.write('/// This file is autogenerated via scripts\n///\n')
			now = long(time.time())
			timeArray = time.localtime(now)
			fp.write('/// Modified by xc_helper_script at %s\n' % time.strftime("%Y-%m-%d", timeArray))
			fp.write('/// Copyright (c) 2012-%s %s. All rights reserved.\n///\n' % (time.strftime("%Y", timeArray), self.xcodeproj.objectWithKeyPath(['objects', self.xcodeproj.rootObjectID, 'attributes', 'ORGANIZATIONNAME'])))
			fp.write('/// VERSION:%s\n' % str(currentVersion))
			fp.write('///\n\n')

			# output images macros
			for imageName, path in images.items():
				macroName = re.sub(r'[^0-9a-zA-Z_]', '_', imageName)
				macroName = '%sIMG_%s' % (self.xcodeproj.projectClassPrefix(), macroName.upper())
				fp.write('#define %s  @"%s"\n' % (macroName, path))

		except Exception, e:
			message().error('Exception while writing file:%s, error:%s' % (os.path.basename(macroFile), e))
			sys.exit(1)

		finally:
			fp.close()

		message().info('Done!')

		

	def currentImageResourceHash(self, images):
		if not images:
			return None
		content = '\n'.join(['%s' % (item) for item in sorted(images)])
		m = md5()
		m.update(content)
		return m.hexdigest()


	def macrosFileVersion(self, macrosFile):
		if not os.path.isfile(macrosFile):
			return None

		fp = open(macrosFile, 'rb')
		if not fp:
			message().warning('Can not open file: %s' % macrosFile)
			return None

		version = None
		while True:
			lines = fp.readlines(100)
			if not lines:
				break
			for l in lines:
				matches = re.search(ur"^///\s*VERSION:\s*([0-9a-zA-Z]{32})", l)
				if matches:
					version = matches.group(1)
					break
		fp.close()
		return version


		